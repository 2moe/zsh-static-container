#!/bin/zsh
set -fexo pipefail

# global env
typeset -x DOCKER_BUILDKIT=1
# Immutable var
local -r src_dir=${0:a:h}
# --------------
# "ghcr" | "reg"
local -r DOCKER_REPO=ghcr

local -A oci_arch_map=(
    ## debian sid
    #
    amd64         amd64,x64
    # riscv64       riscv64,rv64gc
    # arm64         arm64
    # arm/v7        armhf,armv7a
    # arm/v5        armel,armv5te
    # mips64le      mips64el,mips64le
    # ppc64le       ppc64el,ppc64le
    # s390x         s390x,s390x
    # 386           i386,x86

    # # debian sid (ports)
    # # https://www.ports.debian.org/
    #
    # alpha         alpha
    # hppa          hppa
    # loong64       loong64
    # m68k          m68k
    # ppc           powerpc,ppc
    # ppc64         ppc64
    # sh4           sh4
    # sparc64       sparc64
    # ia64          ia64
    # amd64p32      x32

    # # debian 12:
    # mipsle        mipsel,mipsle
    # # debain 10:
    # mips          mips,mipsbe
    # # debain 9:
    # arm/v4        armel,armv4t
    # # debian 7:
    # sparc         sparc
    # # debian 5.0
    # arm/v3        arm,armv3
)
local -A host_arch_map=(
    x86_64      x64
    i386        x86
    i486        x86
    i586        x86
    i686        x86
    aarch64     arm64
    # In fact, just relying on `uname -m` cannot determine `feature = "+vfp3"` (armhf).
    armv7l      armel
    s390        s390x
    mips64      mips64le
    ppc64le     ppc64le
)

# let host_arch = match host_arch_map[ run("uname", "-m") ] {
#     arch if arch.is_empty() => "x64",
#     arch => arch
# };
local -r host_arch=$(
    local arch=$host_arch_map[$(uname -m)]
    case $arch {
        ("") print x64;;
        (*) print $arch;;
    }
)

get_region() {
    # ⌒.⌒, ^ω^
    language=$LANG[(ws^.^)1]
    region=$language[(ws^_^)2]

    # if region.is_empty()
    if ((! #region)) {
        region=US
    }
    print $region
}
build_args=(
    build
    --progress=plain
    #
    --build-arg
    REGION=$(get_region)
)

cd $src_dir

# key: platform
# value: arch
for platform arch (${(kv)oci_arch_map}) {
    arch_arr=(${(s^,^)arch})
    deb_arch=$arch_arr[1]
    tmm_arch=$arch_arr[2]
    if ((! #tmm_arch)) {
        tmm_arch=$deb_arch
    }

    case $platform {
        ("arm/v4") suite=stretch  ;;
        ("arm/v3") suite=lenny    ;;
        (mips)     suite=buster   ;;
        (mipsle)   suite=bookworm ;;
        (sparc)    suite=wheezy   ;;
        (*)        suite=sid      ;;
    }
    args=(
        $build_args
        --build-arg
        DEB_ARCH=$deb_arch

        # --build-arg
        # TMM_ARCH=$tmm_arch

        --build-arg
        DEB_SUITE=$suite

        --build-arg
        OLD_REPO=reg.tmoe.me:2096/pkgs/zsh-static:$host_arch

        --platform
        linux/$platform

        --build-arg
    )
    reg_repo=reg.tmoe.me:2096/debian/sid:$host_arch
    ghcr_repo=ghcr.io/2cd/debian-sid:$host_arch

    case $DOCKER_REPO {
        (reg) args+=SID_REPO=$reg_repo  ;;
        (*)   args+=SID_REPO=$ghcr_repo ;;
    }

    for i (
        # reg.tmoe.me:2096/pkgs/zsh-static:$tmm_arch
        ghcr.io/2moe/zsh-static:$tmm_arch
    ) {
        args+=(
            --tag  $i
            # context:
            .
        )
        docker $args
        docker push $i
    }
}
